# Git specific files
.git
.gitignore

# Node.js local dependencies (these will be installed fresh in the Docker image)
node_modules/

# Logs generated by npm/yarn/pnpm
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

# Local environment variables files
# These should be injected into the container at runtime, not built into the image.
.env
.env.*
# You might want to keep .env.example if your build process somehow uses it,
# but typically it's not needed for the image itself.
# !.env.example

# Compiled TypeScript output (if you ever compile locally and don't clean)
# The Dockerfile should ideally handle the TypeScript compilation.
dist/
build/
out/
lib/
*.tsbuildinfo

# Local log files or directories
logs/
*.log

# Test files and directories (not needed in a production image)
# Adjust patterns based on your test file naming and location
src/**/*.test.ts
src/**/*.spec.ts
src/**/__tests__/
test/
tests/
e2e/

# Coverage reports
coverage/
.nyc_output/

# IDE / Editor specific configuration files
.vscode/
.idea/
*.sublime-project
*.sublime-workspace

# OS-generated files
.DS_Store
Thumbs.db
Desktop.ini

# Docker specific files that are not part of the application code
# (The Dockerfile itself is used to build, not copied into the image context this way)
# Dockerfile # This is implicit
# docker-compose.yml # If it happens to be in the backend folder

# Documentation files (unless your app specifically serves them)
README.md
CONTRIBUTING.md
# Add any other documentation folders or files

# Drizzle ORM specific (if any local state not needed in image)
# Migration files (usually you DO want these copied, so don't ignore them here
# unless you have a specific reason. They are part of your source code.)
# .drizzle/ # If Drizzle Studio creates local state here

# Any other temporary files or build artifacts
tmp/
temp/
*.tmp
*.temp

