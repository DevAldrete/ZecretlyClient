name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.11.0'

jobs:
  # Backend Testing Job
  backend-test:
    name: Backend API Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: zecretly_test
          POSTGRES_PASSWORD: zecretly_test_password
          POSTGRES_DB: zecretly_test
          POSTGRES_INITDB_ARGS: --auth-local=trust --auth-host=md5
        ports:
          - 5434:5432
        options: >-
          --health-cmd "pg_isready -U zecretly_test -d zecretly_test"
          --health-interval 5s
          --health-timeout 10s
          --health-retries 10
          --health-start-period 30s

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: backend/pnpm-lock.yaml

      - name: Install backend dependencies
        working-directory: ./backend
        run: pnpm install --frozen-lockfile

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5434 -U zecretly_test; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Setup test database
        working-directory: ./backend
        env:
          ZECRETLY_DB_CONNECTION_URI: postgresql://zecretly_test:zecretly_test_password@localhost:5434/zecretly_test
        run: |
          pnpm test:db:seed

      - name: Install Playwright browsers
        working-directory: ./backend
        run: pnpm exec playwright install --with-deps

      - name: Run API tests
        working-directory: ./backend
        env:
          CI: true
          ZECRETLY_DB_CONNECTION_URI: postgresql://zecretly_test:zecretly_test_password@localhost:5434/zecretly_test
        run: pnpm test

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: |
            backend/test-results/
            backend/playwright-report/
          retention-days: 7

  # Frontend Build and Test Job
  frontend-build:
    name: Frontend Build & Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        working-directory: ./frontend
        run: pnpm lint

      - name: Check Prettier formatting
        working-directory: ./frontend
        run: pnpm format --check

      - name: Build frontend
        working-directory: ./frontend
        run: pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/
          retention-days: 7

  # Security and Quality Checks
  security-scan:
    name: Security & Quality Scan
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          cd backend && pnpm install --frozen-lockfile
          cd ../frontend && pnpm install --frozen-lockfile

      - name: Run npm audit (Backend)
        working-directory: ./backend
        run: pnpm audit --audit-level moderate
        continue-on-error: true

      - name: Run npm audit (Frontend)
        working-directory: ./frontend
        run: pnpm audit --audit-level moderate
        continue-on-error: true

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # Docker Build Job
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/zecretly-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Integration Tests (End-to-End)
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: backend/pnpm-lock.yaml

      - name: Start services with Docker Compose
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30  # Wait for services to be ready

      - name: Install backend dependencies
        working-directory: ./backend
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        working-directory: ./backend
        run: pnpm exec playwright install --with-deps

      - name: Run integration tests
        working-directory: ./backend
        env:
          CI: true
          ZECRETLY_DB_CONNECTION_URI: postgresql://zecretly_test:zecretly_test_password@localhost:5434/zecretly_test
        run: |
          pnpm test:db:seed
          pnpm exec playwright test tests/integration.api.spec.ts

      - name: Stop services
        if: always()
        run: docker-compose -f docker-compose.test.yml down

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            backend/test-results/
            backend/playwright-report/
          retention-days: 7

  # Deployment Job (Production)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production..."
          # Add your deployment commands here
          # For example:
          # - Deploy to cloud provider (AWS, GCP, Azure)
          # - Update Kubernetes manifests
          # - Trigger deployment webhook
          # - Update infrastructure as code

      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ Production deployment successful!"
          # Add notification logic here (Slack, Discord, email, etc.)

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Production deployment failed!"
          # Add failure notification logic here

  # Deployment Job (Staging)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-build, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging..."
          # Add your staging deployment commands here

      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests on staging..."
          # Add smoke tests for staging environment

      - name: Notify staging deployment
        if: always()
        run: |
          echo "üì¢ Staging deployment completed!"
          # Add notification logic here
