name: Nightly Tests

on:
  schedule:
    # Run every night at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual trigger

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.11.0'

jobs:
  # Comprehensive test suite
  comprehensive-tests:
    name: Comprehensive Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 60

    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: zecretly_test
          POSTGRES_PASSWORD: zecretly_test_password
          POSTGRES_DB: zecretly_test
        ports:
          - 5434:5432
        options: >-
          --health-cmd "pg_isready -U zecretly_test -d zecretly_test"
          --health-interval 5s
          --health-timeout 10s
          --health-retries 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: backend/pnpm-lock.yaml

      - name: Install backend dependencies
        working-directory: ./backend
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        working-directory: ./backend
        run: pnpm exec playwright install --with-deps

      - name: Setup test database
        working-directory: ./backend
        env:
          ZECRETLY_DB_CONNECTION_URI: postgresql://zecretly_test:zecretly_test_password@localhost:5434/zecretly_test
        run: pnpm test:db:seed

      - name: Run all API tests
        working-directory: ./backend
        env:
          CI: true
          ZECRETLY_DB_CONNECTION_URI: postgresql://zecretly_test:zecretly_test_password@localhost:5434/zecretly_test
        run: pnpm test

      - name: Generate test coverage report
        working-directory: ./backend
        run: |
          echo "üìä Generating test coverage report..."
          # Add coverage generation commands here if available

      - name: Upload comprehensive test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: nightly-test-results
          path: |
            backend/test-results/
            backend/playwright-report/
          retention-days: 30

  # Performance tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: comprehensive-tests

    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: zecretly_test
          POSTGRES_PASSWORD: zecretly_test_password
          POSTGRES_DB: zecretly_test
        ports:
          - 5434:5432
        options: >-
          --health-cmd "pg_isready -U zecretly_test -d zecretly_test"
          --health-interval 5s
          --health-timeout 10s
          --health-retries 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: backend/pnpm-lock.yaml

      - name: Install backend dependencies
        working-directory: ./backend
        run: pnpm install --frozen-lockfile

      - name: Setup test database
        working-directory: ./backend
        env:
          ZECRETLY_DB_CONNECTION_URI: postgresql://zecretly_test:zecretly_test_password@localhost:5434/zecretly_test
        run: pnpm test:db:seed

      - name: Run performance tests
        working-directory: ./backend
        env:
          CI: true
          ZECRETLY_DB_CONNECTION_URI: postgresql://zecretly_test:zecretly_test_password@localhost:5434/zecretly_test
        run: |
          echo "üöÄ Running performance tests..."
          # Add performance testing commands here
          # For example, using Artillery, k6, or custom performance tests

          # Example: Test API response times
          echo "Testing API response times..."
          curl -w "@curl-format.txt" -o /dev/null -s "http://localhost:3000/api/health" || echo "Performance test placeholder"

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: |
            backend/performance-results/
          retention-days: 30

  # Security audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          cd backend && pnpm install --frozen-lockfile
          cd ../frontend && pnpm install --frozen-lockfile

      - name: Run security audit (Backend)
        working-directory: ./backend
        run: |
          echo "üîí Running security audit for backend..."
          pnpm audit --audit-level high
        continue-on-error: true

      - name: Run security audit (Frontend)
        working-directory: ./frontend
        run: |
          echo "üîí Running security audit for frontend..."
          pnpm audit --audit-level high
        continue-on-error: true

      - name: Check for secrets in codebase
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # Dependency updates check
  dependency-check:
    name: Dependency Updates
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Check for outdated dependencies (Backend)
        working-directory: ./backend
        run: |
          echo "üì¶ Checking for outdated backend dependencies..."
          pnpm outdated || true

      - name: Check for outdated dependencies (Frontend)
        working-directory: ./frontend
        run: |
          echo "üì¶ Checking for outdated frontend dependencies..."
          pnpm outdated || true

  # Notification
  notify-results:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [comprehensive-tests, performance-tests, security-audit, dependency-check]
    if: always()

    steps:
      - name: Notify success
        if: needs.comprehensive-tests.result == 'success' && needs.performance-tests.result == 'success'
        run: |
          echo "‚úÖ Nightly tests completed successfully!"
          # Add notification logic here (Slack, Discord, email, etc.)

      - name: Notify failure
        if: needs.comprehensive-tests.result == 'failure' || needs.performance-tests.result == 'failure'
        run: |
          echo "‚ùå Nightly tests failed!"
          # Add failure notification logic here
